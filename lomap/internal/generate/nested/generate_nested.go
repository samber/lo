//go:build generate_monad

package main

import (
	_ "embed"

	"bytes"
	"fmt"
	"io/fs"
	"log/slog"
	"os"
	"os/exec"
	"strings"
	"text/template"
)

const (
	monadGeneratorPath = "internal/generate/nested/generate_nested.go"
	filename           = "nested.go"

	ownerWritePermission = 0o644

	argumentsLimit = 9
)

var (
	//go:embed nested.gotmpl
	nestedRaw string
)

type Variant struct {
	N int
}

func main() {
	funcMap := template.FuncMap{
		"add": func(x, y int) int { return x + y },
		"sub": func(x, y int) int { return x - y },
	}
	nestedTmpl := template.Must(template.New("nested").Funcs(funcMap).Parse(nestedRaw))

	pkg := detectPackageName()

	var buf bytes.Buffer

	buf.WriteString("// Code generated by generate_nested.go; DO NOT EDIT.\n")
	buf.WriteString(fmt.Sprintf("package %s\n\n", pkg))
	buf.WriteString(fmt.Sprintf("//go:generate go run %s\n", monadGeneratorPath))

	for n := 2; n <= argumentsLimit; n++ {
		err := nestedTmpl.Execute(&buf, Variant{N: n})
		if err != nil {
			panic(err)
		}
	}

	err := os.WriteFile(filename, buf.Bytes(), fs.FileMode(ownerWritePermission))
	if err != nil {
		panic(err)
	}

	slog.Info("done")
}

func detectPackageName() string {
	out, err := exec.Command("go", "list", "-f", "{{.Name}}").Output()
	if err != nil {
		panic(err)
	}

	return strings.TrimSpace(string(out))
}
