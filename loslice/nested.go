// Code generated by generate_nested.go; DO NOT EDIT.
package loslice

//go:generate go run internal/generate/nested/generate_nested.go

func Get[Slice ~[]T, T any](s Slice, i int) (v T, ok bool) {
	if i < 0 {
		i += len(s)
	}

	if i < 0 || i >= len(s) {
		return
	}

	return s[i], true
}

func Nested2[S1 ~[]S2, S2 ~[]T, T any](
	s1 S1, i1, i2 int,
) (v T, ok bool) {

	s2, ok := Get(s1, i1)
	if !ok {
		return
	}

	return Get(s2, i2)
}

func Nested3[S1 ~[]S2, S2 ~[]S3, S3 ~[]T, T any](
	s1 S1, i1, i2, i3 int,
) (v T, ok bool) {

	s2, ok := Get(s1, i1)
	if !ok {
		return
	}

	s3, ok := Get(s2, i2)
	if !ok {
		return
	}

	return Get(s3, i3)
}

func Nested4[S1 ~[]S2, S2 ~[]S3, S3 ~[]S4, S4 ~[]T, T any](
	s1 S1, i1, i2, i3, i4 int,
) (v T, ok bool) {

	s2, ok := Get(s1, i1)
	if !ok {
		return
	}

	s3, ok := Get(s2, i2)
	if !ok {
		return
	}

	s4, ok := Get(s3, i3)
	if !ok {
		return
	}

	return Get(s4, i4)
}

func Nested5[S1 ~[]S2, S2 ~[]S3, S3 ~[]S4, S4 ~[]S5, S5 ~[]T, T any](
	s1 S1, i1, i2, i3, i4, i5 int,
) (v T, ok bool) {

	s2, ok := Get(s1, i1)
	if !ok {
		return
	}

	s3, ok := Get(s2, i2)
	if !ok {
		return
	}

	s4, ok := Get(s3, i3)
	if !ok {
		return
	}

	s5, ok := Get(s4, i4)
	if !ok {
		return
	}

	return Get(s5, i5)
}

func Nested6[S1 ~[]S2, S2 ~[]S3, S3 ~[]S4, S4 ~[]S5, S5 ~[]S6, S6 ~[]T, T any](
	s1 S1, i1, i2, i3, i4, i5, i6 int,
) (v T, ok bool) {

	s2, ok := Get(s1, i1)
	if !ok {
		return
	}

	s3, ok := Get(s2, i2)
	if !ok {
		return
	}

	s4, ok := Get(s3, i3)
	if !ok {
		return
	}

	s5, ok := Get(s4, i4)
	if !ok {
		return
	}

	s6, ok := Get(s5, i5)
	if !ok {
		return
	}

	return Get(s6, i6)
}

func Nested7[S1 ~[]S2, S2 ~[]S3, S3 ~[]S4, S4 ~[]S5, S5 ~[]S6, S6 ~[]S7, S7 ~[]T, T any](
	s1 S1, i1, i2, i3, i4, i5, i6, i7 int,
) (v T, ok bool) {

	s2, ok := Get(s1, i1)
	if !ok {
		return
	}

	s3, ok := Get(s2, i2)
	if !ok {
		return
	}

	s4, ok := Get(s3, i3)
	if !ok {
		return
	}

	s5, ok := Get(s4, i4)
	if !ok {
		return
	}

	s6, ok := Get(s5, i5)
	if !ok {
		return
	}

	s7, ok := Get(s6, i6)
	if !ok {
		return
	}

	return Get(s7, i7)
}

func Nested8[S1 ~[]S2, S2 ~[]S3, S3 ~[]S4, S4 ~[]S5, S5 ~[]S6, S6 ~[]S7, S7 ~[]S8, S8 ~[]T, T any](
	s1 S1, i1, i2, i3, i4, i5, i6, i7, i8 int,
) (v T, ok bool) {

	s2, ok := Get(s1, i1)
	if !ok {
		return
	}

	s3, ok := Get(s2, i2)
	if !ok {
		return
	}

	s4, ok := Get(s3, i3)
	if !ok {
		return
	}

	s5, ok := Get(s4, i4)
	if !ok {
		return
	}

	s6, ok := Get(s5, i5)
	if !ok {
		return
	}

	s7, ok := Get(s6, i6)
	if !ok {
		return
	}

	s8, ok := Get(s7, i7)
	if !ok {
		return
	}

	return Get(s8, i8)
}

func Nested9[S1 ~[]S2, S2 ~[]S3, S3 ~[]S4, S4 ~[]S5, S5 ~[]S6, S6 ~[]S7, S7 ~[]S8, S8 ~[]S9, S9 ~[]T, T any](
	s1 S1, i1, i2, i3, i4, i5, i6, i7, i8, i9 int,
) (v T, ok bool) {

	s2, ok := Get(s1, i1)
	if !ok {
		return
	}

	s3, ok := Get(s2, i2)
	if !ok {
		return
	}

	s4, ok := Get(s3, i3)
	if !ok {
		return
	}

	s5, ok := Get(s4, i4)
	if !ok {
		return
	}

	s6, ok := Get(s5, i5)
	if !ok {
		return
	}

	s7, ok := Get(s6, i6)
	if !ok {
		return
	}

	s8, ok := Get(s7, i7)
	if !ok {
		return
	}

	s9, ok := Get(s8, i8)
	if !ok {
		return
	}

	return Get(s9, i9)
}
