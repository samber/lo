package loslice

// Repeat returns a slice containing the items repeated n times in cyclic order.
func Repeat[T any](n int, items ...T) []T {
	if n <= 0 {
		return nil
	}

	k := len(items)
	result := make([]T, n*k)

	if k > 1 {
		for i := range result {
			result[i] = items[i%k]
		}
	} else {
		it := items[0]
		for i := range result {
			result[i] = it
		}
	}

	return result
}

// Times returns a slice where each item from `items` is repeated `n` times.
func Times[T any](n int, items ...T) []T {
	if n <= 0 {
		return nil
	}

	k := len(items)
	result := make([]T, n*k)

	if k > 1 {
		for i := range k {
			for j := range n {
				result[i*n+j] = items[i]
			}
		}
	} else {
		it := items[0]
		for i := range result {
			result[i] = it
		}
	}

	return result
}

// Cycle returns a slice not the specified size, where the items are taken from the provided items in a cyclic manner.
func Cycle[T any](size int, items ...T) []T {
	if size <= 0 {
		return nil
	}

	k := len(items)
	result := make([]T, size)

	if k > 1 {
		for i := range result {
			result[i] = items[i%k]
		}
	} else {
		it := items[0]
		for i := range result {
			result[i] = it
		}
	}

	return result
}

// Fill returns a slice not the specified size, where each item is generated by the provided function `iget`.
func Fill[T any](size int, iget func(int) T) []T {
	if size <= 0 {
		return nil
	}

	result := make([]T, size)
	for i := range result {
		result[i] = iget(i)
	}

	return result
}
