//go:build generate_monad

package main

import (
	_ "embed"
	"os/exec"
	"strings"

	"bytes"
	"fmt"
	"io/fs"
	"log/slog"
	"os"
	"text/template"
)

const (
	monadGeneratorPath = "internal/generate/partial/generate_partial.go"
	filename           = "partial.go"

	ownerWritePermission = 0o644

	argumentsLimit = 9
	resultsLimit   = 5
)

var (
	//go:embed partial.gotmpl
	partialRaw string
)

type Variant struct {
	N, P, R int
	Ctx     bool
	Right   bool
}

func main() {
	funcMap := template.FuncMap{
		"add": func(x, y int) int { return x + y },
		"sub": func(x, y int) int { return x - y },
	}
	partialTmpl := template.Must(template.New("not").Funcs(funcMap).Parse(partialRaw))

	pkg := detectPackageName()

	var buf bytes.Buffer

	buf.WriteString("// Code generated by generate_partial.go; DO NOT EDIT.\n")
	buf.WriteString(fmt.Sprintf("package %s\n\n", pkg))
	buf.WriteString(fmt.Sprintf("//go:generate go run %s\n", monadGeneratorPath))
	buf.WriteString("import (\n\t\"context\"\n)\n")

	for _, rightMost := range []bool{false, true} {
		for n := 1; n <= argumentsLimit; n++ {
			if rightMost && n == 1 {
				continue
			}

			for r := 0; r <= resultsLimit; r++ {
				for _, takesCtx := range []bool{false, true} {
					for p := 1; p <= n; p++ {
						err := partialTmpl.Execute(&buf, Variant{
							N: n, P: p, R: r,
							Ctx:   takesCtx,
							Right: rightMost,
						})
						if err != nil {
							panic(err)
						}
					}
				}
			}
		}
	}

	err := os.WriteFile(filename, buf.Bytes(), fs.FileMode(ownerWritePermission))
	if err != nil {
		panic(err)
	}

	slog.Info("done")
}

func detectPackageName() string {
	out, err := exec.Command("go", "list", "-f", "{{.Name}}").Output()
	if err != nil {
		panic(err)
	}

	return strings.TrimSpace(string(out))
}
