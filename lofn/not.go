// Code generated by generate_not.go; DO NOT EDIT.
package lofn

//go:generate go run internal/generate/not/generate_not.go

func Not[T1 any](
	pred func(T1) bool,
) func(T1) bool {
	return func(v1 T1) bool {
		return !pred(v1)
	}
}

func Not2[T1, T2 any](
	pred func(T1, T2) bool,
) func(T1, T2) bool {
	return func(v1 T1, v2 T2) bool {
		return !pred(v1, v2)
	}
}

func Not3[T1, T2, T3 any](
	pred func(T1, T2, T3) bool,
) func(T1, T2, T3) bool {
	return func(v1 T1, v2 T2, v3 T3) bool {
		return !pred(v1, v2, v3)
	}
}

func Not4[T1, T2, T3, T4 any](
	pred func(T1, T2, T3, T4) bool,
) func(T1, T2, T3, T4) bool {
	return func(v1 T1, v2 T2, v3 T3, v4 T4) bool {
		return !pred(v1, v2, v3, v4)
	}
}

func Not5[T1, T2, T3, T4, T5 any](
	pred func(T1, T2, T3, T4, T5) bool,
) func(T1, T2, T3, T4, T5) bool {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5) bool {
		return !pred(v1, v2, v3, v4, v5)
	}
}

func Not6[T1, T2, T3, T4, T5, T6 any](
	pred func(T1, T2, T3, T4, T5, T6) bool,
) func(T1, T2, T3, T4, T5, T6) bool {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6) bool {
		return !pred(v1, v2, v3, v4, v5, v6)
	}
}

func Not7[T1, T2, T3, T4, T5, T6, T7 any](
	pred func(T1, T2, T3, T4, T5, T6, T7) bool,
) func(T1, T2, T3, T4, T5, T6, T7) bool {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7) bool {
		return !pred(v1, v2, v3, v4, v5, v6, v7)
	}
}

func Not8[T1, T2, T3, T4, T5, T6, T7, T8 any](
	pred func(T1, T2, T3, T4, T5, T6, T7, T8) bool,
) func(T1, T2, T3, T4, T5, T6, T7, T8) bool {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8) bool {
		return !pred(v1, v2, v3, v4, v5, v6, v7, v8)
	}
}

func Not9[T1, T2, T3, T4, T5, T6, T7, T8, T9 any](
	pred func(T1, T2, T3, T4, T5, T6, T7, T8, T9) bool,
) func(T1, T2, T3, T4, T5, T6, T7, T8, T9) bool {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8, v9 T9) bool {
		return !pred(v1, v2, v3, v4, v5, v6, v7, v8, v9)
	}
}
