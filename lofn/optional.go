// Code generated by generate_optional.go; DO NOT EDIT.
package lofn

//go:generate go run internal/generate/optional/generate_optional.go

func OrDefault[T1, R any](
	fn func(T1) (R, bool),
) func(T1, R) R {
	return func(v1 T1, fallback R) R {
		if r, ok := fn(v1); ok {
			return r
		}

		return fallback
	}
}

func WithDefault[T1, R any](
	fn func(T1) (R, bool), fallback R,
) func(T1) R {
	return func(v1 T1) R {
		if r, ok := fn(v1); ok {
			return r
		}

		return fallback
	}
}

func OrFallback[T1, R any](
	fn func(T1) (R, bool),
) func(T1, func(T1) R) R {
	return func(v1 T1, fallback func(T1) R) R {
		if r, ok := fn(v1); ok {
			return r
		}

		return fallback(v1)
	}
}

func WithFallback[T1, R any](
	fn func(T1) (R, bool), fallback func(T1) R,
) func(T1) R {
	return func(v1 T1) R {
		if r, ok := fn(v1); ok {
			return r
		}

		return fallback(v1)
	}
}

func OrDefault2[T1, T2, R any](
	fn func(T1, T2) (R, bool),
) func(T1, T2, R) R {
	return func(v1 T1, v2 T2, fallback R) R {
		if r, ok := fn(v1, v2); ok {
			return r
		}

		return fallback
	}
}

func WithDefault2[T1, T2, R any](
	fn func(T1, T2) (R, bool), fallback R,
) func(T1, T2) R {
	return func(v1 T1, v2 T2) R {
		if r, ok := fn(v1, v2); ok {
			return r
		}

		return fallback
	}
}

func OrFallback2[T1, T2, R any](
	fn func(T1, T2) (R, bool),
) func(T1, T2, func(T1, T2) R) R {
	return func(v1 T1, v2 T2, fallback func(T1, T2) R) R {
		if r, ok := fn(v1, v2); ok {
			return r
		}

		return fallback(v1, v2)
	}
}

func WithFallback2[T1, T2, R any](
	fn func(T1, T2) (R, bool), fallback func(T1, T2) R,
) func(T1, T2) R {
	return func(v1 T1, v2 T2) R {
		if r, ok := fn(v1, v2); ok {
			return r
		}

		return fallback(v1, v2)
	}
}

func OrDefault3[T1, T2, T3, R any](
	fn func(T1, T2, T3) (R, bool),
) func(T1, T2, T3, R) R {
	return func(v1 T1, v2 T2, v3 T3, fallback R) R {
		if r, ok := fn(v1, v2, v3); ok {
			return r
		}

		return fallback
	}
}

func WithDefault3[T1, T2, T3, R any](
	fn func(T1, T2, T3) (R, bool), fallback R,
) func(T1, T2, T3) R {
	return func(v1 T1, v2 T2, v3 T3) R {
		if r, ok := fn(v1, v2, v3); ok {
			return r
		}

		return fallback
	}
}

func OrFallback3[T1, T2, T3, R any](
	fn func(T1, T2, T3) (R, bool),
) func(T1, T2, T3, func(T1, T2, T3) R) R {
	return func(v1 T1, v2 T2, v3 T3, fallback func(T1, T2, T3) R) R {
		if r, ok := fn(v1, v2, v3); ok {
			return r
		}

		return fallback(v1, v2, v3)
	}
}

func WithFallback3[T1, T2, T3, R any](
	fn func(T1, T2, T3) (R, bool), fallback func(T1, T2, T3) R,
) func(T1, T2, T3) R {
	return func(v1 T1, v2 T2, v3 T3) R {
		if r, ok := fn(v1, v2, v3); ok {
			return r
		}

		return fallback(v1, v2, v3)
	}
}

func OrDefault4[T1, T2, T3, T4, R any](
	fn func(T1, T2, T3, T4) (R, bool),
) func(T1, T2, T3, T4, R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, fallback R) R {
		if r, ok := fn(v1, v2, v3, v4); ok {
			return r
		}

		return fallback
	}
}

func WithDefault4[T1, T2, T3, T4, R any](
	fn func(T1, T2, T3, T4) (R, bool), fallback R,
) func(T1, T2, T3, T4) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4) R {
		if r, ok := fn(v1, v2, v3, v4); ok {
			return r
		}

		return fallback
	}
}

func OrFallback4[T1, T2, T3, T4, R any](
	fn func(T1, T2, T3, T4) (R, bool),
) func(T1, T2, T3, T4, func(T1, T2, T3, T4) R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, fallback func(T1, T2, T3, T4) R) R {
		if r, ok := fn(v1, v2, v3, v4); ok {
			return r
		}

		return fallback(v1, v2, v3, v4)
	}
}

func WithFallback4[T1, T2, T3, T4, R any](
	fn func(T1, T2, T3, T4) (R, bool), fallback func(T1, T2, T3, T4) R,
) func(T1, T2, T3, T4) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4) R {
		if r, ok := fn(v1, v2, v3, v4); ok {
			return r
		}

		return fallback(v1, v2, v3, v4)
	}
}

func OrDefault5[T1, T2, T3, T4, T5, R any](
	fn func(T1, T2, T3, T4, T5) (R, bool),
) func(T1, T2, T3, T4, T5, R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, fallback R) R {
		if r, ok := fn(v1, v2, v3, v4, v5); ok {
			return r
		}

		return fallback
	}
}

func WithDefault5[T1, T2, T3, T4, T5, R any](
	fn func(T1, T2, T3, T4, T5) (R, bool), fallback R,
) func(T1, T2, T3, T4, T5) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5) R {
		if r, ok := fn(v1, v2, v3, v4, v5); ok {
			return r
		}

		return fallback
	}
}

func OrFallback5[T1, T2, T3, T4, T5, R any](
	fn func(T1, T2, T3, T4, T5) (R, bool),
) func(T1, T2, T3, T4, T5, func(T1, T2, T3, T4, T5) R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, fallback func(T1, T2, T3, T4, T5) R) R {
		if r, ok := fn(v1, v2, v3, v4, v5); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5)
	}
}

func WithFallback5[T1, T2, T3, T4, T5, R any](
	fn func(T1, T2, T3, T4, T5) (R, bool), fallback func(T1, T2, T3, T4, T5) R,
) func(T1, T2, T3, T4, T5) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5) R {
		if r, ok := fn(v1, v2, v3, v4, v5); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5)
	}
}

func OrDefault6[T1, T2, T3, T4, T5, T6, R any](
	fn func(T1, T2, T3, T4, T5, T6) (R, bool),
) func(T1, T2, T3, T4, T5, T6, R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, fallback R) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6); ok {
			return r
		}

		return fallback
	}
}

func WithDefault6[T1, T2, T3, T4, T5, T6, R any](
	fn func(T1, T2, T3, T4, T5, T6) (R, bool), fallback R,
) func(T1, T2, T3, T4, T5, T6) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6); ok {
			return r
		}

		return fallback
	}
}

func OrFallback6[T1, T2, T3, T4, T5, T6, R any](
	fn func(T1, T2, T3, T4, T5, T6) (R, bool),
) func(T1, T2, T3, T4, T5, T6, func(T1, T2, T3, T4, T5, T6) R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, fallback func(T1, T2, T3, T4, T5, T6) R) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5, v6)
	}
}

func WithFallback6[T1, T2, T3, T4, T5, T6, R any](
	fn func(T1, T2, T3, T4, T5, T6) (R, bool), fallback func(T1, T2, T3, T4, T5, T6) R,
) func(T1, T2, T3, T4, T5, T6) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5, v6)
	}
}

func OrDefault7[T1, T2, T3, T4, T5, T6, T7, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7) (R, bool),
) func(T1, T2, T3, T4, T5, T6, T7, R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, fallback R) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7); ok {
			return r
		}

		return fallback
	}
}

func WithDefault7[T1, T2, T3, T4, T5, T6, T7, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7) (R, bool), fallback R,
) func(T1, T2, T3, T4, T5, T6, T7) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7); ok {
			return r
		}

		return fallback
	}
}

func OrFallback7[T1, T2, T3, T4, T5, T6, T7, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7) (R, bool),
) func(T1, T2, T3, T4, T5, T6, T7, func(T1, T2, T3, T4, T5, T6, T7) R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, fallback func(T1, T2, T3, T4, T5, T6, T7) R) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5, v6, v7)
	}
}

func WithFallback7[T1, T2, T3, T4, T5, T6, T7, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7) (R, bool), fallback func(T1, T2, T3, T4, T5, T6, T7) R,
) func(T1, T2, T3, T4, T5, T6, T7) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5, v6, v7)
	}
}

func OrDefault8[T1, T2, T3, T4, T5, T6, T7, T8, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7, T8) (R, bool),
) func(T1, T2, T3, T4, T5, T6, T7, T8, R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8, fallback R) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7, v8); ok {
			return r
		}

		return fallback
	}
}

func WithDefault8[T1, T2, T3, T4, T5, T6, T7, T8, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7, T8) (R, bool), fallback R,
) func(T1, T2, T3, T4, T5, T6, T7, T8) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7, v8); ok {
			return r
		}

		return fallback
	}
}

func OrFallback8[T1, T2, T3, T4, T5, T6, T7, T8, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7, T8) (R, bool),
) func(T1, T2, T3, T4, T5, T6, T7, T8, func(T1, T2, T3, T4, T5, T6, T7, T8) R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8, fallback func(T1, T2, T3, T4, T5, T6, T7, T8) R) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7, v8); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5, v6, v7, v8)
	}
}

func WithFallback8[T1, T2, T3, T4, T5, T6, T7, T8, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7, T8) (R, bool), fallback func(T1, T2, T3, T4, T5, T6, T7, T8) R,
) func(T1, T2, T3, T4, T5, T6, T7, T8) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7, v8); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5, v6, v7, v8)
	}
}

func OrDefault9[T1, T2, T3, T4, T5, T6, T7, T8, T9, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7, T8, T9) (R, bool),
) func(T1, T2, T3, T4, T5, T6, T7, T8, T9, R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8, v9 T9, fallback R) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9); ok {
			return r
		}

		return fallback
	}
}

func WithDefault9[T1, T2, T3, T4, T5, T6, T7, T8, T9, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7, T8, T9) (R, bool), fallback R,
) func(T1, T2, T3, T4, T5, T6, T7, T8, T9) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8, v9 T9) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9); ok {
			return r
		}

		return fallback
	}
}

func OrFallback9[T1, T2, T3, T4, T5, T6, T7, T8, T9, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7, T8, T9) (R, bool),
) func(T1, T2, T3, T4, T5, T6, T7, T8, T9, func(T1, T2, T3, T4, T5, T6, T7, T8, T9) R) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8, v9 T9, fallback func(T1, T2, T3, T4, T5, T6, T7, T8, T9) R) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5, v6, v7, v8, v9)
	}
}

func WithFallback9[T1, T2, T3, T4, T5, T6, T7, T8, T9, R any](
	fn func(T1, T2, T3, T4, T5, T6, T7, T8, T9) (R, bool), fallback func(T1, T2, T3, T4, T5, T6, T7, T8, T9) R,
) func(T1, T2, T3, T4, T5, T6, T7, T8, T9) R {
	return func(v1 T1, v2 T2, v3 T3, v4 T4, v5 T5, v6 T6, v7 T7, v8 T8, v9 T9) R {
		if r, ok := fn(v1, v2, v3, v4, v5, v6, v7, v8, v9); ok {
			return r
		}

		return fallback(v1, v2, v3, v4, v5, v6, v7, v8, v9)
	}
}
