// Code generated by generate_combinate.go; DO NOT EDIT.
package lotup

//go:generate go run internal/generate/combinate/generate_combinate.go

func Zip2[
	T1, T2 any,
	S1 ~[]T1, S2 ~[]T2,
](s1 S1, s2 S2) []Tuple2[T1, T2] {
	size := min(len(s1), len(s2))
	res := make([]Tuple2[T1, T2], size)
	for i := range size {
		res[i] = Of2(s1[i], s2[i])
	}

	return res
}

func Unzip2[
	T1, T2 any,
	Slice ~[]Tuple2[T1, T2],
](ts Slice) ([]T1, []T2) {
	size := len(ts)

	s1 := make([]T1, size)
	s2 := make([]T2, size)
	for i, t := range ts {
		s1[i], s2[i] = t.Unpack()
	}

	return s1, s2
}

func Product2[
	T1, T2 any,
	S1 ~[]T1, S2 ~[]T2,
](s1 S1, s2 S2) []Tuple2[T1, T2] {
	size := len(s1) * len(s2)
	res := make([]Tuple2[T1, T2], 0, size)

	for _, t1 := range s1 {
		for _, t2 := range s2 {
			res = append(res, Of2(t1, t2))
		}
	}

	return res
}

func Zip3[
	T1, T2, T3 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3,
](s1 S1, s2 S2, s3 S3) []Tuple3[T1, T2, T3] {
	size := min(len(s1), len(s2), len(s3))
	res := make([]Tuple3[T1, T2, T3], size)
	for i := range size {
		res[i] = Of3(s1[i], s2[i], s3[i])
	}

	return res
}

func Unzip3[
	T1, T2, T3 any,
	Slice ~[]Tuple3[T1, T2, T3],
](ts Slice) ([]T1, []T2, []T3) {
	size := len(ts)

	s1 := make([]T1, size)
	s2 := make([]T2, size)
	s3 := make([]T3, size)
	for i, t := range ts {
		s1[i], s2[i], s3[i] = t.Unpack()
	}

	return s1, s2, s3
}

func Product3[
	T1, T2, T3 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3,
](s1 S1, s2 S2, s3 S3) []Tuple3[T1, T2, T3] {
	size := len(s1) * len(s2) * len(s3)
	res := make([]Tuple3[T1, T2, T3], 0, size)

	for _, t1 := range s1 {
		for _, t2 := range s2 {
			for _, t3 := range s3 {
				res = append(res, Of3(t1, t2, t3))
			}
		}
	}

	return res
}

func Zip4[
	T1, T2, T3, T4 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4,
](s1 S1, s2 S2, s3 S3, s4 S4) []Tuple4[T1, T2, T3, T4] {
	size := min(len(s1), len(s2), len(s3), len(s4))
	res := make([]Tuple4[T1, T2, T3, T4], size)
	for i := range size {
		res[i] = Of4(s1[i], s2[i], s3[i], s4[i])
	}

	return res
}

func Unzip4[
	T1, T2, T3, T4 any,
	Slice ~[]Tuple4[T1, T2, T3, T4],
](ts Slice) ([]T1, []T2, []T3, []T4) {
	size := len(ts)

	s1 := make([]T1, size)
	s2 := make([]T2, size)
	s3 := make([]T3, size)
	s4 := make([]T4, size)
	for i, t := range ts {
		s1[i], s2[i], s3[i], s4[i] = t.Unpack()
	}

	return s1, s2, s3, s4
}

func Product4[
	T1, T2, T3, T4 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4,
](s1 S1, s2 S2, s3 S3, s4 S4) []Tuple4[T1, T2, T3, T4] {
	size := len(s1) * len(s2) * len(s3) * len(s4)
	res := make([]Tuple4[T1, T2, T3, T4], 0, size)

	for _, t1 := range s1 {
		for _, t2 := range s2 {
			for _, t3 := range s3 {
				for _, t4 := range s4 {
					res = append(res, Of4(t1, t2, t3, t4))
				}
			}
		}
	}

	return res
}

func Zip5[
	T1, T2, T3, T4, T5 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5) []Tuple5[T1, T2, T3, T4, T5] {
	size := min(len(s1), len(s2), len(s3), len(s4), len(s5))
	res := make([]Tuple5[T1, T2, T3, T4, T5], size)
	for i := range size {
		res[i] = Of5(s1[i], s2[i], s3[i], s4[i], s5[i])
	}

	return res
}

func Unzip5[
	T1, T2, T3, T4, T5 any,
	Slice ~[]Tuple5[T1, T2, T3, T4, T5],
](ts Slice) ([]T1, []T2, []T3, []T4, []T5) {
	size := len(ts)

	s1 := make([]T1, size)
	s2 := make([]T2, size)
	s3 := make([]T3, size)
	s4 := make([]T4, size)
	s5 := make([]T5, size)
	for i, t := range ts {
		s1[i], s2[i], s3[i], s4[i], s5[i] = t.Unpack()
	}

	return s1, s2, s3, s4, s5
}

func Product5[
	T1, T2, T3, T4, T5 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5) []Tuple5[T1, T2, T3, T4, T5] {
	size := len(s1) * len(s2) * len(s3) * len(s4) * len(s5)
	res := make([]Tuple5[T1, T2, T3, T4, T5], 0, size)

	for _, t1 := range s1 {
		for _, t2 := range s2 {
			for _, t3 := range s3 {
				for _, t4 := range s4 {
					for _, t5 := range s5 {
						res = append(res, Of5(t1, t2, t3, t4, t5))
					}
				}
			}
		}
	}

	return res
}

func Zip6[
	T1, T2, T3, T4, T5, T6 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5, S6 ~[]T6,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5, s6 S6) []Tuple6[T1, T2, T3, T4, T5, T6] {
	size := min(len(s1), len(s2), len(s3), len(s4), len(s5), len(s6))
	res := make([]Tuple6[T1, T2, T3, T4, T5, T6], size)
	for i := range size {
		res[i] = Of6(s1[i], s2[i], s3[i], s4[i], s5[i], s6[i])
	}

	return res
}

func Unzip6[
	T1, T2, T3, T4, T5, T6 any,
	Slice ~[]Tuple6[T1, T2, T3, T4, T5, T6],
](ts Slice) ([]T1, []T2, []T3, []T4, []T5, []T6) {
	size := len(ts)

	s1 := make([]T1, size)
	s2 := make([]T2, size)
	s3 := make([]T3, size)
	s4 := make([]T4, size)
	s5 := make([]T5, size)
	s6 := make([]T6, size)
	for i, t := range ts {
		s1[i], s2[i], s3[i], s4[i], s5[i], s6[i] = t.Unpack()
	}

	return s1, s2, s3, s4, s5, s6
}

func Product6[
	T1, T2, T3, T4, T5, T6 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5, S6 ~[]T6,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5, s6 S6) []Tuple6[T1, T2, T3, T4, T5, T6] {
	size := len(s1) * len(s2) * len(s3) * len(s4) * len(s5) * len(s6)
	res := make([]Tuple6[T1, T2, T3, T4, T5, T6], 0, size)

	for _, t1 := range s1 {
		for _, t2 := range s2 {
			for _, t3 := range s3 {
				for _, t4 := range s4 {
					for _, t5 := range s5 {
						for _, t6 := range s6 {
							res = append(res, Of6(t1, t2, t3, t4, t5, t6))
						}
					}
				}
			}
		}
	}

	return res
}

func Zip7[
	T1, T2, T3, T4, T5, T6, T7 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5, S6 ~[]T6, S7 ~[]T7,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5, s6 S6, s7 S7) []Tuple7[T1, T2, T3, T4, T5, T6, T7] {
	size := min(len(s1), len(s2), len(s3), len(s4), len(s5), len(s6), len(s7))
	res := make([]Tuple7[T1, T2, T3, T4, T5, T6, T7], size)
	for i := range size {
		res[i] = Of7(s1[i], s2[i], s3[i], s4[i], s5[i], s6[i], s7[i])
	}

	return res
}

func Unzip7[
	T1, T2, T3, T4, T5, T6, T7 any,
	Slice ~[]Tuple7[T1, T2, T3, T4, T5, T6, T7],
](ts Slice) ([]T1, []T2, []T3, []T4, []T5, []T6, []T7) {
	size := len(ts)

	s1 := make([]T1, size)
	s2 := make([]T2, size)
	s3 := make([]T3, size)
	s4 := make([]T4, size)
	s5 := make([]T5, size)
	s6 := make([]T6, size)
	s7 := make([]T7, size)
	for i, t := range ts {
		s1[i], s2[i], s3[i], s4[i], s5[i], s6[i], s7[i] = t.Unpack()
	}

	return s1, s2, s3, s4, s5, s6, s7
}

func Product7[
	T1, T2, T3, T4, T5, T6, T7 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5, S6 ~[]T6, S7 ~[]T7,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5, s6 S6, s7 S7) []Tuple7[T1, T2, T3, T4, T5, T6, T7] {
	size := len(s1) * len(s2) * len(s3) * len(s4) * len(s5) * len(s6) * len(s7)
	res := make([]Tuple7[T1, T2, T3, T4, T5, T6, T7], 0, size)

	for _, t1 := range s1 {
		for _, t2 := range s2 {
			for _, t3 := range s3 {
				for _, t4 := range s4 {
					for _, t5 := range s5 {
						for _, t6 := range s6 {
							for _, t7 := range s7 {
								res = append(res, Of7(t1, t2, t3, t4, t5, t6, t7))
							}
						}
					}
				}
			}
		}
	}

	return res
}

func Zip8[
	T1, T2, T3, T4, T5, T6, T7, T8 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5, S6 ~[]T6, S7 ~[]T7, S8 ~[]T8,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5, s6 S6, s7 S7, s8 S8) []Tuple8[T1, T2, T3, T4, T5, T6, T7, T8] {
	size := min(len(s1), len(s2), len(s3), len(s4), len(s5), len(s6), len(s7), len(s8))
	res := make([]Tuple8[T1, T2, T3, T4, T5, T6, T7, T8], size)
	for i := range size {
		res[i] = Of8(s1[i], s2[i], s3[i], s4[i], s5[i], s6[i], s7[i], s8[i])
	}

	return res
}

func Unzip8[
	T1, T2, T3, T4, T5, T6, T7, T8 any,
	Slice ~[]Tuple8[T1, T2, T3, T4, T5, T6, T7, T8],
](ts Slice) ([]T1, []T2, []T3, []T4, []T5, []T6, []T7, []T8) {
	size := len(ts)

	s1 := make([]T1, size)
	s2 := make([]T2, size)
	s3 := make([]T3, size)
	s4 := make([]T4, size)
	s5 := make([]T5, size)
	s6 := make([]T6, size)
	s7 := make([]T7, size)
	s8 := make([]T8, size)
	for i, t := range ts {
		s1[i], s2[i], s3[i], s4[i], s5[i], s6[i], s7[i], s8[i] = t.Unpack()
	}

	return s1, s2, s3, s4, s5, s6, s7, s8
}

func Product8[
	T1, T2, T3, T4, T5, T6, T7, T8 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5, S6 ~[]T6, S7 ~[]T7, S8 ~[]T8,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5, s6 S6, s7 S7, s8 S8) []Tuple8[T1, T2, T3, T4, T5, T6, T7, T8] {
	size := len(s1) * len(s2) * len(s3) * len(s4) * len(s5) * len(s6) * len(s7) * len(s8)
	res := make([]Tuple8[T1, T2, T3, T4, T5, T6, T7, T8], 0, size)

	for _, t1 := range s1 {
		for _, t2 := range s2 {
			for _, t3 := range s3 {
				for _, t4 := range s4 {
					for _, t5 := range s5 {
						for _, t6 := range s6 {
							for _, t7 := range s7 {
								for _, t8 := range s8 {
									res = append(res, Of8(t1, t2, t3, t4, t5, t6, t7, t8))
								}
							}
						}
					}
				}
			}
		}
	}

	return res
}

func Zip9[
	T1, T2, T3, T4, T5, T6, T7, T8, T9 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5, S6 ~[]T6, S7 ~[]T7, S8 ~[]T8, S9 ~[]T9,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5, s6 S6, s7 S7, s8 S8, s9 S9) []Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9] {
	size := min(len(s1), len(s2), len(s3), len(s4), len(s5), len(s6), len(s7), len(s8), len(s9))
	res := make([]Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9], size)
	for i := range size {
		res[i] = Of9(s1[i], s2[i], s3[i], s4[i], s5[i], s6[i], s7[i], s8[i], s9[i])
	}

	return res
}

func Unzip9[
	T1, T2, T3, T4, T5, T6, T7, T8, T9 any,
	Slice ~[]Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9],
](ts Slice) ([]T1, []T2, []T3, []T4, []T5, []T6, []T7, []T8, []T9) {
	size := len(ts)

	s1 := make([]T1, size)
	s2 := make([]T2, size)
	s3 := make([]T3, size)
	s4 := make([]T4, size)
	s5 := make([]T5, size)
	s6 := make([]T6, size)
	s7 := make([]T7, size)
	s8 := make([]T8, size)
	s9 := make([]T9, size)
	for i, t := range ts {
		s1[i], s2[i], s3[i], s4[i], s5[i], s6[i], s7[i], s8[i], s9[i] = t.Unpack()
	}

	return s1, s2, s3, s4, s5, s6, s7, s8, s9
}

func Product9[
	T1, T2, T3, T4, T5, T6, T7, T8, T9 any,
	S1 ~[]T1, S2 ~[]T2, S3 ~[]T3, S4 ~[]T4, S5 ~[]T5, S6 ~[]T6, S7 ~[]T7, S8 ~[]T8, S9 ~[]T9,
](s1 S1, s2 S2, s3 S3, s4 S4, s5 S5, s6 S6, s7 S7, s8 S8, s9 S9) []Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9] {
	size := len(s1) * len(s2) * len(s3) * len(s4) * len(s5) * len(s6) * len(s7) * len(s8) * len(s9)
	res := make([]Tuple9[T1, T2, T3, T4, T5, T6, T7, T8, T9], 0, size)

	for _, t1 := range s1 {
		for _, t2 := range s2 {
			for _, t3 := range s3 {
				for _, t4 := range s4 {
					for _, t5 := range s5 {
						for _, t6 := range s6 {
							for _, t7 := range s7 {
								for _, t8 := range s8 {
									for _, t9 := range s9 {
										res = append(res, Of9(t1, t2, t3, t4, t5, t6, t7, t8, t9))
									}
								}
							}
						}
					}
				}
			}
		}
	}

	return res
}
